from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer
import itertools
from chatterbot.conversation import Statement
from chatterbot import comparisons
from nltk.corpus import stopwords
import nltk
nltk.download('stopwords')
from nltk.tokenize import word_tokenize
from fuzzywuzzy import fuzz
import time
import pyttsx3


chatbot = ChatBot('Zorro',storage_adapter='chatterbot.storage.SQLStorageAdapter',
    logic_adapters=[
        {
            'import_path': 'chatterbot.logic.BestMatch',
            
            
            'maximum_similarity_threshold': 0.70
        },
         {
            'import_path': 'chatterbot.logic.SpecificResponseAdapter',
            'input_text': 'Help me!',
            'output_text': 'I am always there for you. SHoot your question'
        }
    ])
        
file = open(FilePAth)
file_read = file.read().split('\n')
#####file_read_1 = file_read.remove('')
clean_file = []
for i in file_read:
    if i != '':
        clean_file.append(i)

trainer = ListTrainer(chatbot)
#trainer.train(clean_file)

def get_feedback():

    text = input()
    if 'yes' in text.lower():
        
        return True
    #else: #'no' in text.lower():
    if 'no' in text.lower():
        return False
    
Questions = []
for i in clean_file:
    if i[-1] == '?':
        Questions.append(i)
        
      
def fuzzy_logic(User_input):
    Questions = []
    total_score = []
    for i in clean_file:
        if i[-1] == '?':
            Questions.append(i)
    for Question in Questions:
        Ratio = fuzz.ratio(Question,User_input)
        Partial_Ratio = fuzz.partial_ratio(Question,User_input)
        Token_Sort_Ratio = fuzz.token_sort_ratio(Question,User_input)
        Token_Set_Ratio = fuzz.token_set_ratio(Question,User_input)
        Total_score = Ratio+Partial_Ratio+Token_Sort_Ratio+Token_Set_Ratio
        total_score.append(Total_score)
        #return Total_score
    Question_Index = total_score.index(max(total_score))
    reply =  (Questions[Question_Index])
    print('{} --- is this the question you intend to ask'.format(reply))
    User_reply = input()
    if User_reply == 'yes' or User_reply == 'Yes' or User_reply == 'YES':
        
        #print('Cool ! I will get you the reply you wanted shortly')
        response = chatbot.get_response(
        reply
        )
        return response
    else:
        print('I am sorry. I cannot understand what you say')
    #print(Ratio,Partial_Ratio,Token_Sort
    
print('Hello, How are you, How can I help you ?')

#set True

while True:  
    input_statement = Statement(text=input())
    engine = pyttsx3.init()
    #time.sleep(2)
    if input_statement.text == 'bye':
        print('Bye, Take Care')
        break
    else:            
        response = chatbot.generate_response(input_statement)
        if (response.text == ' ' or response.text[-1] == '?'):
            print('I do not have proper response as of now')
            Approximate_reply = fuzzy_logic(input_statement.text) 
            engine.say(Approximate_reply)
            engine.runAndWait()
            print(Approximate_reply)
            print('Does it answer your question ?')
            feedback = get_feedback()                 
            if feedback is False:
                print('please input the correct one')
                correct_response = Statement(text=input())
                chatbot.learn_response(correct_response, input_statement)
                print('Responses added to bot!')
                print('Okay Awesome, Is there anything else I can help you with ?')               
            if feedback is True: 
                print('Please visit our site "https://www.reddotstorage.com/self-storage/search", Select your location and give us a call. Our customer service team will be able to assist you.')
                

                    #text_tokens = word_tokenize(input_statement.text)
                    #tokens_without_sw = [word for word in text_tokens if not word in stopwords.words()]
                    #print(tokens_without_sw)
        else:
            print_statement = '\n Is "{}" a response you expected for your question "{}"? \n'.format(
            response.text,
            input_statement.text
            )
            engine.say(response)
            engine.runAndWait()
            print(print_statement)
            feedback = get_feedback()
            if feedback is True:
                print('Okay Awesome, Is there anything else I can help you with ?')
            

            if feedback is False:
                print('please input the correct one')
                correct_response = Statement(text=input())
                chatbot.learn_response(correct_response, input_statement)
                print('Responses added to bot!')
                print('Okay Awesome, Is there anything else I can help you with ?')
  
