from tkinter import *
import time
import tkinter.messagebox
from Chatbot_trial import chat
from Chatbot_trial import get_feedback
from chatterbot.conversation import Statement
from PIL import ImageTk, Image
import webbrowser
import speech_recognition as sr 
import pyttsx3
from PIL import Image, ImageTk  
import threading
from ttkthemes import ThemedStyle

saved_username = ["User"]

window_size="1000x500"

class ChatInterface(Frame):    
    user_name = ""
    def __init__(self, master=None):        
        Frame.__init__(self, master)
        self.master = master    
        
        
        # sets default bg for top level windows
        self.tl_bg = "blue"
        self.tl_bg2 = "blue"
        self.tl_fg = "#FFFFFF"
        self.font = "Verdana 10"
        menu = Menu(self.master)
        self.master.config(menu=menu, bd=5)
# Menu bar
      # File
        file = Menu(menu, tearoff=0)
        menu.add_cascade(label="File", menu=file)
       # file.add_command(label="Save Chat Log", command=self.save_chat)
        file.add_command(label="Clear Chat", command=self.clear_chat)
      #  file.add_separator()
        file.add_command(label="Exit",command=self.chatexit)
    # Options
        options = Menu(menu, tearoff=0)
        menu.add_cascade(label="Font", menu=options)              
     
         # font
        font = Menu(options, tearoff=0)
        options.add_cascade(label="Font", menu=font)
        font.add_command(label="Default",command=self.font_change_default)
        font.add_command(label="Times",command=self.font_change_times)
        font.add_command(label="System",command=self.font_change_system)
        font.add_command(label="Helvetica",command=self.font_change_helvetica)
        font.add_command(label="Fixedsys",command=self.font_change_fixedsys)        
        
        #help_option.add_command(label="Features", command=self.features_msg)
        help_option = Menu(menu, tearoff=0)
        menu.add_cascade(label="Help", menu=help_option)
        
               
        self.photo = PhotoImage(file = "microphone.png").s ubsample(10,10)
        
       
        self.text_frame = Frame(self.master, bd=6)
        self.text_frame.pack(expand=True, fill=BOTH)

        # scrollbar for text box
        self.text_box_scrollbar = Scrollbar(self.text_frame, bd=0)
        self.text_box_scrollbar.pack(fill=Y, side=RIGHT)

        # contains messages
        self.text_box = Text(self.text_frame, yscrollcommand=self.text_box_scrollbar.set, state=DISABLED,
                             bd=1, padx=6, pady=6, spacing3=8, wrap=WORD, bg='white', font="Verdana 10", relief=GROOVE,
                             width=10, height=8, fg = 'black', selectborderwidth = 5, undo=True)
        self.text_box.pack(expand=True, fill=BOTH)
        self.text_box_scrollbar.config(command=self.text_box.yview)     
             
        
        
        
        # frame containing user entry field
        self.entry_frame = Frame(self.master, bd=1)
        self.entry_frame.pack(fill=BOTH, expand=True)     
     
        # entry field
        
        self.entry_field = Entry(self.entry_frame, bd=1, justify=LEFT)
        self.entry_field.pack(fill=X, padx=6, pady=6, ipady=3)
        self.Label = Label(self.entry_field,text='Enter Your Question here', font = "Verdana 10")
        self.Label.pack()
        
        self.username = Entry(self.entry_frame,justify=RIGHT)        
        self.username.pack(padx=6,pady=6)
        self.Label = Label(self.entry_frame,text='Enter Your Name', font = "Verdana 10")
        self.Label.pack(padx=6,pady=6)
        
        
        
        
        self.text_box.configure(state=NORMAL)      
        self.text_box.tag_config("user",foreground="blue",justify='right')
        self.text_box.insert(END, "Hi, Please type in your Question and Enter your Name\n", "user")  
        #self.user_name = self.entry_field.get()
        #ur1 = self.user_name
        #self.text_box.insert(END, ur1, "user")
        
        self.text_box.configure(state=DISABLED)
        self.text_box.see(END)
        # self.users_message = self.entry_field.get()
        
         # frame containing send button and emoji button
        self.send_button_frame = Frame(self.entry_frame, bd=0)
        self.send_button_frame.pack(side=RIGHT,fill=BOTH,padx=3)

        # send button
        self.send_button = Button(self.send_button_frame, text="Send Text", width=15,height = 3,  bg='light grey',
                                  bd=1, relief = RAISED, command=lambda: self.send_message_insert(None), activebackground="#FFFFFF",
                                  activeforeground="#000000")
        self.send_button.pack(side=LEFT, ipady=10)
        
        self.master.bind("<Return>", self.send_message_insert) 
        
        self.r = IntVar()
        self.r.set("2")
        
        
        
        #photo_image = ImageTk.PhotoImage(photo)
        
        self.Radio_button_2 = Button(self.send_button_frame,image = self.photo,bg='light grey', relief = RAISED
                                          ,bd=1, compound = LEFT,                            
                                    command=lambda: self.voice_process())
        self.Radio_button_2.pack(anchor = E, side=LEFT, ipady=10)
        #self.master.bind("<Return>", self.send_message_insert)
        
        
        
        self.last_sent_label(date="No messages sent.")
        #t2 = threading.Thread(target=self.send_message_insert(, name='t1')
        #t2.start()
        self.get_focus = self.master.bind_all("<Button-1>", lambda e: self.focus(e))
        
        self.text_box.configure(state=NORMAL)   
        
            
        
            
        
        
  
        
        
    def last_sent_label(self, date):

        try:
            self.sent_label.destroy()
        except AttributeError:
            pass

        self.sent_label = Label(self.entry_frame, font="Verdana 7", text=date, bg=self.tl_bg2, fg=self.tl_fg)
        self.sent_label.pack(side=LEFT, fill=X, padx=3)

    def clear_chat(self):
        self.text_box.config(state=NORMAL)
        self.last_sent_label(date="No messages sent.")
        self.text_box.delete(1.0, END)
        self.text_box.delete(1.0, END)
        self.text_box.config(state=DISABLED)

    def chatexit(self):
        exit()
        
    def msg(self):
        
        tkinter.messagebox.showinfo("Chatbot v1.0",'Chatbot is a virtual help answering queries for users')
    
    def get_user(self):
        self.user_name = self.entry_field.get()      
       
        
   
        
    def send_message_insert(self, message):     
         
        user_input = Statement(text= (self.entry_field.get()))        
        self.user_name = str(self.username.get())
        if self.user_name == '':
            user_name_string = "User"
        else:
            user_name_string = self.user_name
            self.username.config(state=DISABLED)
            
        pr1 = user_input          
        self.text_box.configure(state=NORMAL)       
        self.text_box.tag_config("user",foreground="blue",justify='right')           
        self.text_box.insert(END,user_name_string+": ","user") 
        self.text_box.tag_config("user_input",foreground="blue",justify='right')
        self.text_box.insert(END,pr1,"user_input")             
        self.text_box.insert(END, "\n")         
        self.text_box.configure(state=DISABLED)
        self.text_box.see(END)        
        
        ob=chat(user_input)           
        pr = ob 
        self.text_box.configure(state=NORMAL)
        self.text_box.configure(padx = 8)
        self.text_box.tag_config("bot_reply",foreground="red",justify='left')
        self.text_box.insert(END, pr,"bot_reply")   
        self.text_box.insert(END, "\n")
        self.text_box.insert(END, str(time.strftime('%B:%d:%Y:%H:%M:%S')))
        self.text_box.insert(END, "\n")       
        self.text_box.configure(state=DISABLED)
        self.text_box.see(END)
        self.last_sent_label(str(time.strftime( "Last message sent: " + '%B %d, %Y' + ' at ' + '%I:%M %p')))
        self.entry_field.delete(0, END)
         
   
        
        #t2 = threading.Thread(target=self.playResponce, args=(ob,))
        #t2.start()
    def voice_process(self,tog=[0]): 
        
        tog[0] = not tog[0]
        
        if tog[0]:
        
            r = sr.Recognizer()
            # Initialize the engine 
            engine = pyttsx3.init()     
            engine.say("Hey, How can I help you")
            engine.runAndWait()

            try: 
                with sr.Microphone() as source2:
                    r.adjust_for_ambient_noise(source2, duration=0.2) 
                    audio2 = r.listen(source2, timeout = 15)
                    MyText = r.recognize_google(audio2)
                    self.text_box.configure(state=NORMAL)       
                    self.text_box.tag_config("user",foreground="blue",justify='right')           
                    self.text_box.insert(END,"User: ","user") 
                    self.text_box.tag_config("user_input",foreground="blue",justify='right')
                    self.text_box.insert(END,MyText,"user_input")             
                    self.text_box.insert(END, "\n")         
                    self.text_box.configure(state=DISABLED)
                    self.text_box.see(END) 


                    MyText_1 = Statement(MyText)
                    ob=chat(MyText_1) 
                    self.text_box.configure(state=NORMAL)
                    self.text_box.configure(padx = 8)
                    self.text_box.tag_config("bot_reply",foreground="red",justify='left')
                    self.text_box.insert(END, ob,"bot_reply")   
                    self.text_box.insert(END, "\n")
                    self.text_box.insert(END, str(time.strftime('%B:%d:%Y:%H:%M:%S')))
                    self.text_box.insert(END, "\n")       
                    self.text_box.configure(state=DISABLED)
                    self.text_box.see(END)
                    self.last_sent_label(str(time.strftime( "Last message sent: " + '%B %d, %Y' + ' at ' + '%I:%M %p')))
                    engine.say(ob)  
                    engine.runAndWait()
                    self.text_box.insert(END,"Click Voice button to speak")
            except:
                engine.say("I do not understand, Please type in your question")
        else:
            self.text_box.configure(state=NORMAL)
            self.text_box.configure(padx = 8)
            self.text_box.tag_config("bot_reply",foreground="red",justify='left')
            self.text_box.insert(END,"Sorry I couldnt get you, please type in your question" ,"bot_reply")   
            self.text_box.insert(END, "\n")
          
    def focus(self,event): 
        widget = self.master.focus_get() 
        if widget == '.!frame2.!entry':
            self.text_box.configure(state=NORMAL)   
            self.text_box.insert(END,"typing....")
            
        
        return widget         
             
    def font_change_default(self):
        self.text_box.config(font="Verdana 10")
        self.entry_field.config(font="Verdana 10")
        self.font = "Verdana 10"
        
    def font_change_times(self):
        self.text_box.config(font="Times")
        self.entry_field.config(font="Times")
        self.font = "Times"

    def font_change_system(self):
        self.text_box.config(font="System")
        self.entry_field.config(font="System")
        self.font = "System"

    def font_change_helvetica(self):
        self.text_box.config(font="helvetica 10")
        self.entry_field.config(font="helvetica 10")
        self.font = "helvetica 10"

    def font_change_fixedsys(self):                             
        self.text_box.config(font="fixedsys")
        self.entry_field.config(font="fixedsys")
        self.font = "fixedsys"           
    
 

root=Tk()
a = ChatInterface(root)
root.geometry(window_size) 
style = ThemedStyle(root)
style.set_theme("aquativo")
root.title("Voice enabled chatbot")
root.iconbitmap("C:\\Users\\vndra\\Anaconda3\\reddot_ico.ico")
root.mainloop()
